package com.usk.demo.feignclient;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.usk.demo.entity.Account;


@FeignClient(name="banking-service", url="http://localhost:8088/bankproject/bankapp")
public interface BankingClient {
	
	@GetMapping("/getAccount")
    public Account getAccount(@RequestParam String accountNumber);

	@PostMapping("/fundtransfer")
    public String transferFunds(@RequestParam String accountNumber,
                                                @RequestParam String to,
                                                @RequestParam Double purchaseAmount); 
	
}




package com.usk.demo.service;

import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.AutoConfigureOrder;
import org.springframework.stereotype.Service;

import com.usk.demo.entity.Account;
import com.usk.demo.entity.AccountFetching;
import com.usk.demo.entity.CartItem;
import com.usk.demo.entity.Product;
import com.usk.demo.entity.User;
import com.usk.demo.feignclient.BankingClient;
import com.usk.demo.repository.CartItemRepository;
import com.usk.demo.repository.UserRepository;
import com.usk.demo.repository.ProductRepository;
import java.time.LocalDateTime;

@Service
public class CartServiceImpl implements CartService {

	Logger logger = LoggerFactory.getLogger(CartServiceImpl.class);
	
	@Autowired
	private CartItemRepository cartItemRepository;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private ProductRepository productRepository;	
	
	@Autowired
	BankingClient bankingClient;
	
	@Override
	public String addCartItem(CartItem cartItem) {
		logger.info("E com application add cart items");
		if(userRepository.existsById(cartItem.getUserId())) {
			if(productRepository.existsById(cartItem.getProductId())) {
			cartItemRepository.save(cartItem);
			return "Updated in cart";
			}
			return "Product id not there";
		}
		return "UserId not found";
	}

	@Override
	public String removeFromCart(Long id) {
		logger.info("E com application remove cart");
		cartItemRepository.deleteById(id);
		return "Cart details are removed";
	}

	@Override
	public List<CartItem> getAllDetails() {
		logger.info("E com application get all cart items");
		return cartItemRepository.findAll();
	}
	
	@Override
	public String productPurchase(Long productId, Long userId, Long accountNumber, Long quantity) {
		logger.info("ECommerceServiceImpl:productPurchase:starts");
		Optional<User> user = userRepository.findById(userId);
		Optional<Product> prod = productRepository.findById(productId);
		if (user.isPresent() && prod.isPresent()) {
			Product product = prod.get();
			logger.info("ECommerceServiceImpl:productPurchase:productExist");
			if (product.getStock() - quantity >= 0) {
				logger.info("ECommerceServiceImpl:productPurchase:enoughQuantity");
				boolean isPayable = checkBankBalanceForPurchase(accountNumber, product, quantity);
				
				if(!isPayable) {
					return "Low balance";
				}
				Long remainingItem = product.getStock() - quantity;
				product.setStock(remainingItem);
				CartItem account = new CartItem(userId,productId,product.getPrice(), product.getName(),LocalDateTime.now(),"purchase", quantity);
				cartItemRepository.save(account);
				logger.info("ECommerceServiceImpl:productPurchase:purchaseDone");
				productRepository.save(product);
				return "Thank you for your order! We're so excited for you to receive your new "
						+ product.getName() + "!";
			}
			logger.info("ECommerceServiceImpl:productPurchase:outOfStock");
			return "Out of Stock";
		}
		logger.info("ECommerceServiceImpl:productPurchase:userOrProductNotExist");
		return "User/Product is not exist";
	}
	
	public boolean checkBankBalanceForPurchase(Long accountNumber, Product product, Long quantity) {
		Account accountResponse = bankingClient.getAccount(accountNumber.toString());
		Double balanceAmount = accountResponse.getBalance();
		Long purchaseAmount = (long) (product.getPrice()*quantity);
		if(balanceAmount-purchaseAmount>=0)
		{
			bankingClient.transferFunds(accountNumber.toString(), "8259551541", Double.valueOf(purchaseAmount));
			return true;
		}
		return false;
	}
	
}


package com.usk.demo.controller;

import java.util.List;

import javax.validation.constraints.Positive;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.usk.demo.entity.CartItem;
import com.usk.demo.service.CartService;
import org.springframework.web.bind.annotation.RequestBody;


@RestController
@RequestMapping("/cartitem")
public class CartController {
	Logger logger = LoggerFactory.getLogger(CartController.class);
	
	@Autowired
	private CartService cartService;
	
	@PostMapping("/add")
	public String saveCartDetails(@RequestBody  CartItem cartItem) {
		logger.info("E com application add cart item");
		return cartService.addCartItem(cartItem);
	}
	
	@GetMapping("/allCartItem")
	public List<CartItem> getCartDetails() {
		logger.info("E com application  getall details from cart");
		return cartService.getAllDetails();
	}
	
	@DeleteMapping("/remove/{cartId}")
	public String removeCart(@RequestParam Long cartId) {
		logger.info("E com application remove cart");
		return cartService.removeFromCart(cartId);	
	}
	
	@PostMapping("/purchase")
	public String productPurchase(@RequestParam Long productId, @RequestParam Long userId,
			@RequestParam Long accoutNumber, @RequestParam Long quantity) {
		logger.info("ECommerceController:productPurchase:starts");
		return cartService.productPurchase(productId, userId, accoutNumber, quantity);
	}
 
 
	
	
	
}
I recently change the i got error need to fix it
